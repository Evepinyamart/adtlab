#include <stdio.h>
#include <stdlib.h>

struct node
{
    int i, j, value;
    struct node *next;
};

struct node *addMatrices(struct node *matA, struct node *matB)
{
    struct node *resMat = (struct node *)malloc(sizeof(struct node));
    resMat->next = NULL;
    struct node *pointer = resMat;
    struct node *p = matA;

    while (matB != NULL)
    {
        struct node *resNode = (struct node *)malloc(sizeof(struct node));
        resNode->next = NULL;
        resNode->value = matB->value;

        while (p != NULL && (p->i < matB->i || (p->i == matB->i && p->j <= matB->j)))
        {
            if (p->i == matB->i && p->j == matB->j)
            {
                resNode->value = matA->value + matB->value;
            }
            p = p->next;
        }

        while (matA != p)
        {
            struct node *temp = (struct node *)malloc(sizeof(struct node));
            temp->i = matA->i;
            temp->j = matA->j;
            temp->value = matA->value;
            temp->next = NULL;

            pointer->next = temp;
            pointer = pointer->next;

            matA = matA->next;
        }

        pointer->next = resNode;
        pointer = pointer->next;
        matB = matB->next;
    }

    return resMat->next; // อันแรกเป็นค่าว่าง ผลจากบรรทัดที่34 เริ่มที่pointer->next
}

int main()
{
    // Example usage
    struct node *matA = NULL; // Initialize your matA and matB matrices
    struct node *matB = NULL;

    // Call the function to add the matrices
    struct node *result = addMatrices(matA, matB);

    // Print the result matrix
    struct node *temp = result;
    while (temp != NULL)
    {
        printf("(%d, %d): %d\n", temp->i, temp->j, temp->value);
        temp = temp->next;
    }

    // Free memory
    temp = result;
    while (temp != NULL)
    {
        struct node *next = temp->next;
        free(temp);
        temp = next;
    }

    return 0;
}